<% function getLectureIndex(id) {
    let lectureIndex = 0;
    for (let i = 0; i < periodTimings.length; i++) {
        if (!periodTimings[i].is_break) {
            lectureIndex++;
        }
        if (periodTimings[i].id === id) {
            return lectureIndex;
        }
    }
    return -1;
} %>
<% layout("/layouts/boilerplate.ejs") %>
<style>
    .timetable-container {
        overflow-x: auto; /* Prevents overflow */
        width: 100%;
    }

    /* table {
        max-width: 100%;
        table-layout: fixed; 
    } */

    .editable-cell {
        width: 90%; /* Prevents inputs from expanding too much */
        text-align: center;
        padding: 5px;
    }
    table {
        width: 85%;
        /* max-width: 100%; */
        table-layout: fixed;
        border-collapse: collapse;
        text-align: center;
        margin: 20px auto;
    }
    th, td {
        border: 1px solid black; 
        text-align: center; 
        vertical-align: middle; 
        padding: 10px; 
        min-width: 120px; 
        height: 50px; 
        word-wrap: break-word; 
    }

    th {
        background-color: #f2f2f2; 
        font-weight: bold;
    }

    td:empty {
        height: 50px;
    }
    .timetable-container {
        margin-bottom: 30px;
    }
    .break-row {
        background-color: #f3f3f3;
        font-weight: bold;
    }
    .timetable-section {
        border: 2px solid black;
        padding: 15px;
        margin: 30px auto;
        width: 90%;
        background-color: #f9f9f9;
    }
    .section-header {
        text-align: center;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .delete-btn, .delete-section-btn {
        display: block;
        margin: 10px auto;
        padding: 8px 15px;
        font-size: 14px;
        cursor: pointer;
        border: none;
    }
    .delete-btn {
        background-color: red;
        color: white;
    }
    .delete-section-btn {
        background-color: darkred;
        color: white;
        font-size: 16px;
    }
    .edit-btn {
        background-color: blue;
        color: white;
    }
    .download-btn {
        background-color: green;
        color: white;
    }
    .delete-btn:hover { background-color: darkred; }
    .edit-btn:hover { background-color: darkblue; }
    .download-btn:hover { background-color: darkgreen; }
</style>
<body>
    <div class="dashboard-container">
        <!-- Sidebar Navigation -->
        <%- include("../includes/admin_sidebar.ejs") %>
    
        <!-- Main Content -->
        <div class="content">
            <h2 class="text-center mb-4" style="color: black;"><i class="bi bi-calendar"></i> Saved Timetables</h2>

            <% if (savedTimetables.length === 0) { %>
                <p style="text-align: center;">No saved timetables found.</p>
            <% } %>
        
            <% let groupedTimetables = {}; %>
            <% savedTimetables.forEach(timetable => { %>
                <% if (!groupedTimetables[timetable.created_at]) { groupedTimetables[timetable.created_at] = []; } %>
                <% groupedTimetables[timetable.created_at].push(timetable); %>
            <% }); %>
            
            <% Object.keys(groupedTimetables).forEach(createdAt => { %>
                <div class="timetable-section">
                    <div class="section-header">Timetables Created on <%= createdAt %></div>
        
                <% groupedTimetables[createdAt].forEach(timetable => { %>
                    <div id="timetable_<%= timetable.id %>" class="timetable-container">
                        <h3 style="text-align: center;"> <%= timetable.class_name %> Timetable</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Time / Day</th>
                                    <th>Monday</th>
                                    <th>Tuesday</th>
                                    <th>Wednesday</th>
                                    <th>Thursday</th>
                                    <th>Friday</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% let merged = {}; %>
                                <% for (let pd = 0; pd < periodTimings.length; pd++) {
                                    let periodObj = periodTimings[pd];
                                    let label = `${formatTime(periodObj.start_time)} - ${formatTime(periodObj.end_time)}`;

                                    if (periodObj.is_break) { %>
                                        <tr>
                                            <th colspan="6" style="text-align: center; background-color: #e0e0e0;">
                                                <%= label %> (Break)
                                            </th>
                                        </tr>
                                    <% } else {
                                        let currentLecture = getLectureIndex(periodObj.id);
                                        let nextPeriod = periodTimings[pd + 1];
                                        let nextLecture = nextPeriod ? getLectureIndex(nextPeriod.id) : null;
                                        let canMerge = nextPeriod && !nextPeriod.is_break;
                                %>
                                    <tr>
                                        <th><%= label %></th>
                                        <% ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].forEach(day => {
                                            let key = `${currentLecture}-${day}`;
                                            if (merged[key]) return;

                                            let current = timetable.timetable[currentLecture]?.[day];
                                            let next = (canMerge && nextLecture !== null)
                                                ? timetable.timetable[nextLecture]?.[day]
                                                : null;

                                            let isDouble = canMerge && current && next &&
                                                current.subject_name === next.subject_name &&
                                                current.teacher_name === next.teacher_name &&
                                                current.room_name === next.room_name;
                                        %>
                                            <% if (isDouble) { %>
                                                <td rowspan="2">
                                                    <%= current.subject_name %><br>
                                                    <%= current.teacher_name %><br>
                                                    <%= current.room_name %>
                                                </td>
                                                <% merged[`${nextLecture}-${day}`] = true; %>
                                            <% } else { %>
                                                <td>
                                                    <% if (current) { %>
                                                        <%= current.subject_name %><br>
                                                        <%= current.teacher_name %><br>
                                                        <%= current.room_name %>
                                                    <% } else { %>
                                                        -
                                                    <% } %>
                                                </td>
                                            <% } %>
                                        <% }); %>
                                    </tr>
                                <% } } %>
                            </tbody>
                        </table>
        
                        <div style="text-align: center;">
                            <button class="btn btn-success" onclick="downloadPDF('<%= timetable.id %>')"><i class="bi bi-file-earmark-pdf"></i> Download PDF</button>
                            &nbsp;&nbsp;&nbsp;
                            <button class="btn btn-info" onclick="loadEditableTimetable('<%= timetable.id %>')"><i class="bi bi-pencil-square"></i> Edit Timetable</button>
                            &nbsp;&nbsp;&nbsp;
                        </div>
                    </div>

                    <div id="editableTimetable_<%= timetable.id %>" class="timetable-container" style="display: none;" data-class-name=<%= timetable.class_id %>>
                        <h3 style="text-align: center;">Edit Class <%= timetable.class_id %> Timetable</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Time / Day</th>
                                    <th>Monday</th>
                                    <th>Tuesday</th>
                                    <th>Wednesday</th>
                                    <th>Thursday</th>
                                    <th>Friday</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% for (let pd = 0; pd < periodTimings.length; pd++) {
                                    const periodObj = periodTimings[pd];
                                    const timeLabel = `${formatTime(periodObj.start_time)} - ${formatTime(periodObj.end_time)}`;
                                %>
                                    <% if (periodObj.is_break) { %>
                                        <tr>
                                            <th colspan="6" style="text-align: center; background-color: lightgray;">
                                                <%= timeLabel %> (Break)
                                            </th>
                                        </tr>
                                    <% } else {
                                        const period = getLectureIndex(periodObj.id);
                                    %>
                                        <tr>
                                            <th><%= timeLabel %></th>
                                            <% ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].forEach(day => {
                                                const cell = timetable.timetable?.[period]?.[day] || {};
                                            %>
                                                <td>
                                                    <input type="text" value="<%= cell.subject_name || '' %>" 
                                                        data-day="<%= day %>" data-period="<%= period %>"
                                                        class="editable-cell subject"><br>
                                                    <input type="text" value="<%= cell.teacher_name || '' %>" 
                                                        data-day="<%= day %>" data-period="<%= period %>"
                                                        class="editable-cell teacher"><br>
                                                    <input type="text" value="<%= cell.room_name || '' %>" 
                                                        data-day="<%= day %>" data-period="<%= period %>"
                                                        class="editable-cell room">
                                                </td>
                                            <% }); %>
                                        </tr>
                                    <% } %>
                                <% } %>
                            </tbody>
                        </table>

         
                        <div style="text-align: center;">
                            <button class="btn btn-primary" onclick="saveEditedTimetable('<%= timetable.id %>')"><i class="bi bi-save"></i> Save Timetable</button>
                            &nbsp;&nbsp;&nbsp;
                            <button class="btn btn-danger" onclick="closeEditableTimetable('<%= timetable.id %>')"><i class="bi bi-x-lg"></i> Cancel</button>
                        </div>
                    </div>
                <% }); %>
                
                <div style="text-align: center;">
                <form method="POST" action="/admin/timetable/delete/<%= createdAt %>?_method=DELETE">
                    <input type="hidden" name="created_at" value="<%= createdAt %>">
                    <button class="btn btn-danger">Delete All Timetables </button>
                </form>
                <br>
                <form method="GET" action="/admin/timetable/final">
                    <input type="hidden" name="created_at" value="<%= createdAt %>">
                    <button class="btn btn-primary">Finalize Timetables </button>
                </form>
                </div>
            </div>
            <% }); %>
            <script>
                const periodTimings = <%- JSON.stringify(periodTimings) %>;

                function loadEditableTimetable(timetableId) {
                    document.getElementById("timetable_" + timetableId).style.display = "none";
                    document.getElementById("editableTimetable_" + timetableId).style.display = "block";
                }
        
                function closeEditableTimetable(timetableId) {
                    document.getElementById("timetable_" + timetableId).style.display = "block";
                    document.getElementById("editableTimetable_" + timetableId).style.display = "none";
                }
        
                function saveEditedTimetable(timetableId) { 
                    let updatedTimetable = {};
        
                    document.querySelectorAll(`#editableTimetable_${timetableId} .editable-cell`).forEach(input => {
                        let day = input.dataset.day ? input.dataset.day.trim() : null;
                        let period = input.dataset.period ? input.dataset.period.trim() : null;
        
                        if (!day || !period) return;
        
                        if (!updatedTimetable[period]) updatedTimetable[period] = {};
                        if (!updatedTimetable[period][day]) updatedTimetable[period][day] = {};
        
                        
                        if (input.classList.contains("subject")) {
                            updatedTimetable[period][day].subject_name = input.value.trim();
                        } else if (input.classList.contains("teacher")) {
                            updatedTimetable[period][day].teacher_name = input.value.trim();
                        } else if (input.classList.contains("room")) {
                            updatedTimetable[period][day].room_name = input.value.trim();
                        }
                    });
        
                    
                    Object.keys(updatedTimetable).forEach(period => {
                        Object.keys(updatedTimetable[period]).forEach(day => {
                            if (!updatedTimetable[period][day].subject_name) updatedTimetable[period][day].subject_name = "";
                            if (!updatedTimetable[period][day].teacher_name) updatedTimetable[period][day].teacher_name = "";
                            if (!updatedTimetable[period][day].room_name) updatedTimetable[period][day].room_name = "";
                        });
                    });
        
                    let formattedTimetable = { timetable: updatedTimetable } ;
        
                    fetch('/admin/timetable/update', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ timetableId, formattedTimetable }) 
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(" Timetable updated successfully!");
                            location.reload();
                        } else {
                            alert(" Error updating timetable.");
                        }
                    })
                    .catch(error => console.error(" Fetch Error:", error));
                }
        
                function downloadPDF(classId) {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({
                        orientation: "landscape",
                        unit: "mm",
                        format: "a4"
                    });

                    const timetableContainer = document.querySelector(`#timetable_${classId}`);
                    if (!timetableContainer) {
                        alert("Timetable not found!");
                        return;
                    }

                    const className = timetableContainer.querySelector("h3")?.innerText.replace(" Timetable", "").trim() || `Class_${classId}`;

                    // PDF Title
                    doc.setFontSize(18);
                    doc.text(`Timetable for ${className}`, 148.5, 15, { align: "center" });

                    const table = timetableContainer.querySelector("table");
                    if (!table) {
                        alert("Timetable table not found!");
                        return;
                    }

                    // Extract table header
                    const headers = [];
                    table.querySelectorAll("thead tr th").forEach((th, index) => {
                        headers.push({
                            content: th.innerText.trim(),
                            styles: {
                                halign: "center",
                                fillColor: [100, 150, 255], // Header row color
                                textColor: 255,
                                fontStyle: "bold"
                            }
                        });
                    });

                    // Build table body
                    const body = [];
                    table.querySelectorAll("tbody tr").forEach(tr => {
                        const row = [];
                        const cells = Array.from(tr.children);

                        if (cells.length === 1 && cells[0].hasAttribute("colspan")) {
                            // Break row
                            row.push({
                                content: cells[0].innerText.trim(),
                                colSpan: headers.length,
                                styles: {
                                    halign: "center",
                                    fontStyle: "bold",
                                    fillColor: [220, 220, 220]
                                }
                            });
                        } else {
                            cells.forEach((cell, index) => {
                                const cellData = {
                                    content: cell.innerText.trim(),
                                    styles: {
                                        halign: "center"
                                    }
                                };

                                // Style the first column (Period Timings)
                                if (index === 0) {
                                    cellData.styles.fillColor = [230, 230, 250]; // Light lavender
                                    cellData.styles.fontStyle = "bold";
                                }

                                // Handle colspan/rowspan
                                if (cell.hasAttribute("colspan")) {
                                    cellData.colSpan = parseInt(cell.getAttribute("colspan"));
                                }
                                if (cell.hasAttribute("rowspan")) {
                                    cellData.rowSpan = parseInt(cell.getAttribute("rowspan"));
                                }

                                row.push(cellData);
                            });
                        }

                        body.push(row);
                    });

                    // Generate the timetable in PDF
                    doc.autoTable({
                        head: [headers],
                        body: body,
                        startY: 25,
                        theme: 'grid',
                        styles: {
                            fontSize: 10,
                            cellPadding: 4,
                            valign: "middle",
                            halign: "center"
                        },
                        // No alternate row coloring
                        didParseCell: function (data) {
                            // No-op: we manually style first column & header already
                        }
                    });

                    doc.save(`${className}-Timetable.pdf`);
                }
            </script>
        </div>
    </div>
</body>